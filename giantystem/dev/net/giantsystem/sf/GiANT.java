/*
 *GiANT - Graphical Algebra System
 *
 *Copyright (C) 2005  Aneesh Karve, e33nflow@users.sourceforge.net
 *
 *This program is free software; you can redistribute it and/or
 *modify it under the terms of the GNU General Public License
 *as published by the Free Software Foundation; either version 2
 *of the License, or (at your option) any later version.
 *
 *This program is distributed in the hope that it will be useful,
 *but WITHOUT ANY WARRANTY; without even the implied warranty of
 *MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *GNU General Public License for more details.
 *
 *You should have received a copy of the GNU General Public License
 *along with this program; if not, write to the Free Software
 *Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.*/

package net.giantsystem.sf;
/*
 * JDesk2.java
 *
 * Created on December 16, 2004, 11:51 AM
 */
import java.awt.*;
import javax.swing.*;
/**
 * The main class. Contains the GUI layout for the main window, desktop, etc.
 * @author karve
 */
public class GiANT extends javax.swing.JFrame {
	static{
		//put menu bar where it belongs on OSX
		System.setProperty("apple.laf.useScreenMenuBar", "true");
	}
    /**
     * Version string; also used by About window
     * @see #ABOUT
     */
    public final static String VERSION = "0.9.3 Alpha";
	
	/**
	 * public pointer to the main GUI <CODE>JFrame</CODE>
	 */
	protected static GiANT gui;
	/**
	 * About window for GiANT
	 * @see AboutFrame
	 */
	public final static AboutFrame ABOUT = new AboutFrame();
    /**
     * Use metal look-and-feel?
     */
    private final static boolean metal = false; //use metal look and feel
    /**
     * Text color for error messages
     * @see #appendConsoleText
     * @see #consoleTextArea
     */
    protected final static Color ERROR_TEXT = new Color(204,0,0);
    /**
     * Color for non-error messages
	 * @see #appendConsoleText
     * @see #consoleTextArea
     */
    protected final static Color NORMAL_TEXT = new Color(0,0,0);
    
    /**
     * Height in pixels of dock on bottom (varies by look-and-feel)
     */
    public final static int dockHeight = new JInternalFrame().getDesktopIcon().getHeight() + 10;
    
    /**
     * Bell escape char
     */
    public final static char BELL = '\u0007';
    
    
    /**
     * Where the towers live
     * @see City
     */
    private final City city = new City();
    /**
     * The KASH terminal associated with this session of GiANT
     * @see KASHTerm
     */
    protected KASHTerm kash;// = new KASHTerm();
    /**
     * Dialog for creating new variables
     * @see VariableDialog
     */
    private final VariableDialog varDialog = new VariableDialog();
	/**
	 * Inspector for all variables defined via the GUI
	 */
	private final JInternalFrame globalInspector = new GlobalInspector();
    /**
     * Dialog for defining new number fields
     */
    private final NewFieldDialog newNumFieldDialog = new NewFieldDialog();
    /**
     * Has this object been initialized? Used to avoid null pointer, etc. problems when
     * the constructor is first called and some object pointers are not ready to be de-
     * referenced
	 * @see #prep
     */
    private boolean initialized = false;
    
    /**
     * look-and-feel pointer
     */
    private LookAndFeel laf;
    /** Creates new form GiANT */
    public GiANT() {
        initComponents();
    }
	
	/**
	 * Fetch list of all fields on the desktop
	 * @return list of all fields on the desktop
	 */
	public java.util.Set getFields(){
		return city.getFields();
	}
    
	/**
	 * Which <CODE>Inspector</CODE> is currently selected by the desktop?
	 * @return The currently selected <CODE>Inspector</CODE>; <CODE>null</CODE> if no such exists
	 */
	private Inspector getCurrentInspector(){
		JInternalFrame f = desktop.getSelectedFrame();
		if(f != null){
			String cls = f.getClass().getName();
			if(cls.equals(Inspector.class.getName()))
				return (Inspector)f;
			else
				return null;
		}else
			return null;
	}
	
	/**
	 * "We outta' here"
	 */
	private void exitApp(){
		if(kash != null)
			kash.close();
        System.exit(0);
	}
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        frameBasePanel = new javax.swing.JPanel();
        desktop = new javax.swing.JDesktopPane();
        mainPanel = new javax.swing.JPanel();
        cityScrollPane = new javax.swing.JScrollPane();
        newVariableFrame = new javax.swing.JInternalFrame();
        NVFPanel = new javax.swing.JPanel();
        NVFMainPanel = new javax.swing.JPanel();
        NVFFieldsPanel = new javax.swing.JPanel();
        NVFNameLabel = new javax.swing.JLabel();
        NVFNameField = new javax.swing.JTextField();
        NVFValueLabel = new javax.swing.JLabel();
        NVFValueField = new javax.swing.JTextField();
        NVFButtonPanel = new javax.swing.JPanel();
        NVFCancelButton = new javax.swing.JButton();
        NVFButtonSpacer = new javax.swing.JLabel();
        NVFCreateButton = new javax.swing.JButton();
        NVFSideSpacerPanel = new javax.swing.JPanel();
        consolePanel = new javax.swing.JPanel();
        consoleTextAreaPanel = new javax.swing.JPanel();
        consoleScrollPane = new javax.swing.JScrollPane();
        consoleTextArea = new javax.swing.JTextArea();
        progressBarPanel = new javax.swing.JPanel();
        progressBarCoverPanel = new javax.swing.JPanel();
        progressBar = new javax.swing.JProgressBar();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        saveAsMenuItem = new javax.swing.JMenuItem();
        quitMenuItem = new javax.swing.JMenuItem();
        numberFieldsMenu = new javax.swing.JMenu();
        newNumberFieldMenuItem = new javax.swing.JMenuItem();
        numberFieldMenuSeparator = new javax.swing.JSeparator();
        newVariableMenuItem = new javax.swing.JMenuItem();
        unitGroupMenuItem = new javax.swing.JMenuItem();
        classGroupMenuItem = new javax.swing.JMenuItem();
        viewMenu = new javax.swing.JMenu();
        showKASHMenuItem = new javax.swing.JMenuItem();
        showGlobalInspectorMenuItem = new javax.swing.JMenuItem();
        viewMenuSeparator = new javax.swing.JSeparator();
        viewElementsMenuItem = new javax.swing.JMenuItem();
        viewPolynomialsMenuItem = new javax.swing.JMenuItem();
        viewIdealsMenuItem = new javax.swing.JMenuItem();
        aboutMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("GiANT");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setName("mainFrame");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        frameBasePanel.setLayout(new java.awt.BorderLayout());

        frameBasePanel.setFocusable(false);
        frameBasePanel.setMinimumSize(new java.awt.Dimension(300, 250));
        frameBasePanel.setOpaque(false);
        frameBasePanel.setPreferredSize(new java.awt.Dimension(960, 690));
        desktop.setAutoscrolls(true);
        desktop.setDoubleBuffered(true);
        desktop.setDragMode(1);
        desktop.setFocusCycleRoot(false);
        desktop.setFocusable(false);
        desktop.setName("desktop");
        desktop.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                desktopResized(evt);
            }
        });

        mainPanel.setLayout(new java.awt.BorderLayout());

        mainPanel.setFocusable(false);
        mainPanel.setName("mainPanel");
        mainPanel.setOpaque(false);
        cityScrollPane.setBorder(null);
        cityScrollPane.setAutoscrolls(true);
        cityScrollPane.setFocusable(false);
        cityScrollPane.setViewportView(city);
        mainPanel.add(cityScrollPane, java.awt.BorderLayout.CENTER);

        mainPanel.setBounds(0, 0, -1, -1);
        desktop.add(mainPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        newVariableFrame.setClosable(true);
        newVariableFrame.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        newVariableFrame.setTitle("New Ideal");
        newVariableFrame.setFocusCycleRoot(false);
        newVariableFrame.setFocusable(false);
        NVFPanel.setLayout(new java.awt.GridBagLayout());

        NVFMainPanel.setLayout(new java.awt.BorderLayout());

        NVFFieldsPanel.setLayout(new java.awt.GridBagLayout());

        NVFNameLabel.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        NVFNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        NVFNameLabel.setText("Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 5);
        NVFFieldsPanel.add(NVFNameLabel, gridBagConstraints);

        NVFNameField.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 3.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        NVFFieldsPanel.add(NVFNameField, gridBagConstraints);

        NVFValueLabel.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        NVFValueLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        NVFValueLabel.setText("Value");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        NVFFieldsPanel.add(NVFValueLabel, gridBagConstraints);

        NVFValueField.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 3.0;
        NVFFieldsPanel.add(NVFValueField, gridBagConstraints);

        NVFMainPanel.add(NVFFieldsPanel, java.awt.BorderLayout.CENTER);

        NVFButtonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 0, 5));

        NVFCancelButton.setFont(new java.awt.Font("Dialog", 0, 11));
        NVFCancelButton.setText("Cancel");
        NVFButtonPanel.add(NVFCancelButton);

        NVFButtonSpacer.setText("   ");
        NVFButtonPanel.add(NVFButtonSpacer);

        NVFCreateButton.setFont(new java.awt.Font("Dialog", 0, 11));
        NVFCreateButton.setText("Create");
        NVFButtonPanel.add(NVFCreateButton);

        NVFMainPanel.add(NVFButtonPanel, java.awt.BorderLayout.SOUTH);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 6.0;
        gridBagConstraints.weighty = 1.0;
        NVFPanel.add(NVFMainPanel, gridBagConstraints);

        NVFSideSpacerPanel.setMinimumSize(new java.awt.Dimension(20, 10));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        NVFPanel.add(NVFSideSpacerPanel, gridBagConstraints);

        newVariableFrame.getContentPane().add(NVFPanel, java.awt.BorderLayout.CENTER);

        newVariableFrame.setBounds(140, 90, 280, 130);
        desktop.add(newVariableFrame, javax.swing.JLayeredPane.PALETTE_LAYER);

        frameBasePanel.add(desktop, java.awt.BorderLayout.CENTER);

        consolePanel.setLayout(new java.awt.GridBagLayout());

        consolePanel.setFocusable(false);
        consoleTextAreaPanel.setLayout(new java.awt.BorderLayout());

        consoleTextAreaPanel.setFocusable(false);
        consoleScrollPane.setBorder(null);
        consoleScrollPane.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        consoleScrollPane.setToolTipText("To scoll error messages click here and use the arrow keys, or drag the mouse here");
        consoleScrollPane.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        consoleScrollPane.setAutoscrolls(true);
        consoleScrollPane.setFocusable(false);
        consoleScrollPane.setMaximumSize(new java.awt.Dimension(32767, 15));
        consoleScrollPane.setMinimumSize(new java.awt.Dimension(23, 12));
        consoleTextArea.setBackground(javax.swing.UIManager.getDefaults().getColor("InternalFrame.background"));
        consoleTextArea.setEditable(false);
        consoleTextArea.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        consoleTextArea.setLineWrap(true);
        consoleTextArea.setRows(1);
        consoleTextArea.setTabSize(4);
        consoleTextArea.setWrapStyleWord(true);
        consoleTextArea.setAutoscrolls(false);
        consoleScrollPane.setViewportView(consoleTextArea);

        consoleTextAreaPanel.add(consoleScrollPane, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 7.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        consolePanel.add(consoleTextAreaPanel, gridBagConstraints);

        progressBarPanel.setLayout(new java.awt.CardLayout());

        progressBarPanel.setFocusable(false);
        progressBarCoverPanel.setLayout(null);

        progressBarCoverPanel.setName("cover");
        progressBarPanel.add(progressBarCoverPanel, "cover");

        progressBar.setMaximum(20);
        progressBar.setFocusable(false);
        progressBar.setName("progressBar");
        progressBarPanel.add(progressBar, "progressBar");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        consolePanel.add(progressBarPanel, gridBagConstraints);

        frameBasePanel.add(consolePanel, java.awt.BorderLayout.NORTH);

        getContentPane().add(frameBasePanel, java.awt.BorderLayout.CENTER);

        menuBar.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        fileMenu.setText("File");
        saveAsMenuItem.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        saveAsMenuItem.setText("Save tower as JPEG");
        saveAsMenuItem.setEnabled(false);
        fileMenu.add(saveAsMenuItem);

        quitMenuItem.setText("Quit GiANT");
        quitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(quitMenuItem);

        menuBar.add(fileMenu);

        numberFieldsMenu.setText("Number Field");
        newNumberFieldMenuItem.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        newNumberFieldMenuItem.setText("New");
        newNumberFieldMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newNumberFieldMenuItemActionPerformed(evt);
            }
        });

        numberFieldsMenu.add(newNumberFieldMenuItem);

        numberFieldsMenu.add(numberFieldMenuSeparator);

        newVariableMenuItem.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        newVariableMenuItem.setText("New Variable");
        newVariableMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newVariableMenuItemActionPerformed(evt);
            }
        });

        numberFieldsMenu.add(newVariableMenuItem);

        unitGroupMenuItem.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));

        unitGroupMenuItem.setText("Compute Unit Group");
        unitGroupMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unitGroupMenuItemActionPerformed(evt);
            }
        });

        numberFieldsMenu.add(unitGroupMenuItem);

        classGroupMenuItem.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        classGroupMenuItem.setText("Compute Class Group");
        classGroupMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classGroupMenuItemActionPerformed(evt);
            }
        });

        numberFieldsMenu.add(classGroupMenuItem);

        menuBar.add(numberFieldsMenu);

        viewMenu.setText("View");
        showKASHMenuItem.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_K, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        showKASHMenuItem.setText("KASH");
        showKASHMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showKASHMenuItemActionPerformed(evt);
            }
        });

        viewMenu.add(showKASHMenuItem);

        showGlobalInspectorMenuItem.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        showGlobalInspectorMenuItem.setText("All Variables");
        showGlobalInspectorMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showGlobalInspectorMenuItemActionPerformed(evt);
            }
        });

        viewMenu.add(showGlobalInspectorMenuItem);

        viewMenu.add(viewMenuSeparator);

        viewElementsMenuItem.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        viewElementsMenuItem.setText("Elements Tab");
        viewElementsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewElementsMenuItemActionPerformed(evt);
            }
        });

        viewMenu.add(viewElementsMenuItem);

        viewPolynomialsMenuItem.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        viewPolynomialsMenuItem.setText("Polynomials Tab");
        viewPolynomialsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPolynomialsMenuItemActionPerformed(evt);
            }
        });

        viewMenu.add(viewPolynomialsMenuItem);

        viewIdealsMenuItem.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
        viewIdealsMenuItem.setText("Ideals Tab");
        viewIdealsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewIdealsMenuItemActionPerformed(evt);
            }
        });

        viewMenu.add(viewIdealsMenuItem);

        menuBar.add(viewMenu);

        aboutMenu.setText("About");
        aboutMenuItem.setText("About GiANT");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });

        aboutMenu.add(aboutMenuItem);

        menuBar.add(aboutMenu);

        setJMenuBar(menuBar);

        pack();
    }
    // </editor-fold>//GEN-END:initComponents

	/**
	 * Clean up & quit
	 * @param evt quit event
	 */
	private void quitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitMenuItemActionPerformed
		exitApp();
	}//GEN-LAST:event_quitMenuItemActionPerformed

	/**
	 * Show the About window
	 * @see #ABOUT
	 * @param evt menu event
	 */
	private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
// TODO add your handling code here:
		ABOUT.setVisible(true);
	}//GEN-LAST:event_aboutMenuItemActionPerformed

	/**
	 * Show the Global Inspector
	 * @param evt menu event
	 * @see GlobalInspector
	 */
	private void showGlobalInspectorMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showGlobalInspectorMenuItemActionPerformed
        selectAndShow(globalInspector);
	}//GEN-LAST:event_showGlobalInspectorMenuItemActionPerformed

	/**
	 * Switch to the <CODE>Polynomials</CODE> tab in the current inspector (if possible)
	 * @param evt menu event
	 */
	private void viewPolynomialsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPolynomialsMenuItemActionPerformed
		Inspector i = gui.getCurrentInspector();
		if(i != null)
			i.selectTab("Polynomials");
	}//GEN-LAST:event_viewPolynomialsMenuItemActionPerformed

	/**
	 * Switch to the <CODE>Ideals</CODE> tab in the current inspector (if possible)
	 * @param evt menu event
	 */
	private void viewIdealsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewIdealsMenuItemActionPerformed
		Inspector i = gui.getCurrentInspector();
		if(i != null)
			i.selectTab("Ideals");
	}//GEN-LAST:event_viewIdealsMenuItemActionPerformed

	/**
	 * Calculate the unit group for the currently selected field <CODE>Inspector</CODE>
	 * @param evt menu event
	 */
	private void unitGroupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unitGroupMenuItemActionPerformed
       	Inspector i = gui.getCurrentInspector();
		if(i != null)
			i.getField().calcUnitGroup();
	}//GEN-LAST:event_unitGroupMenuItemActionPerformed

	/**
	 * Switch to the <CODE>Elements</CODE> tab in the current inspector (if possible)
	 * @param evt menu event
	 */
	private void viewElementsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewElementsMenuItemActionPerformed
       	Inspector i = gui.getCurrentInspector();
		if(i != null)
			i.selectTab("Elements");
	}//GEN-LAST:event_viewElementsMenuItemActionPerformed

	/**
	 * Calculate the class group for the currently selected field <CODE>Inspector</CODE>
	 * @param evt menu event
	 */
	private void classGroupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classGroupMenuItemActionPerformed
		Inspector i = gui.getCurrentInspector();
		if(i != null)
			i.getField().calcClassGroup();
	}//GEN-LAST:event_classGroupMenuItemActionPerformed

    /**
     * Show the new variable dialog
     * @see #varDialog
     * @param evt menu event
     */
    private void newVariableMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newVariableMenuItemActionPerformed

        JInternalFrame f = desktop.getSelectedFrame();
        //System.err.println("LIVE");
        boolean problem = false;
        if(f==null){
            problem = true;
        }else{
            String cls = f.getClass().getName();
            //DEBUG
            //System.err.println("cls="+cls);
            if(cls.equals(Inspector.class.getName())){
                //DEBUG
                //System.err.println("INSPECTOR CLASS");
                Inspector i = (Inspector)f;
                showNewVariableDialog(i.getSelectedTab());
            }
            else
                problem = true;
        }
        if(problem)
            appendConsoleText("\nNew Variable? Please select a number field window first.", true);
    }//GEN-LAST:event_newVariableMenuItemActionPerformed

    /**
     * Show the new number field dialog
     * @param evt menu event
     * @see NewFieldDialog
     */
    private void newNumberFieldMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newNumberFieldMenuItemActionPerformed
        // TODO add your handling code here:
        GiANT.gui.showNewNumberFieldDialog();
    }//GEN-LAST:event_newNumberFieldMenuItemActionPerformed

    /**
     * Show the KASH shell
     * @param evt menu event
     * @see KASHTerm
     */
    private void showKASHMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showKASHMenuItemActionPerformed
        // TODO add your handling code here:
        if(kash.isIcon())
            try{
                kash.setIcon(false);
            }catch(java.beans.PropertyVetoException e){
                System.err.println("Exception deiconifying kash:  " + e);
            }
        
        selectAndShow(kash);
        /*kash.show();
        kash.toFront();
        kash.setSelected(true);*/
    }//GEN-LAST:event_showKASHMenuItemActionPerformed

    /**
     * Items that live on the desktop (e.g. city) need to keep abreast of size changes
     * @see #city
     * @param evt resize event
     */
    private void desktopResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_desktopResized
        sizeMainPanel();
    }//GEN-LAST:event_desktopResized
    
    /**
     * Exit the Application; called when the user closes the main window
     * @param evt window-closing event
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        exitApp();
    }//GEN-LAST:event_exitForm
    
    //set the main panel to the size of the desktop minus room for the dock
    /**
     * Maintain space for the dock, set the city to the right size. Called 
     * at startup and whenever the desktop resizes.
     */
    private void sizeMainPanel(){
        int h = desktop.getHeight() - dockHeight; //allow for a little extra room
        int w = desktop.getWidth();
        if (h < 0)
            h = -h;
        mainPanel.setPreferredSize(new Dimension(w, h));
        mainPanel.setSize(new Dimension(w, h));
        mainPanel.revalidate();
        if(initialized)
            gui.requestFocus(true);
    }
    
    /**
     * Show the new variable dialog
     * @see #varDialog
     * @param t Currently selected <CODE>Tab</CODE> of the currently selected <CODE>Inspector</CODE>
     */
    protected void showNewVariableDialog(Tab t){
        //TO DO (maybe) make placement relative to currently selected inspector?
        //then again it's nice that the dialog "remembers" its place...
        varDialog.setTab(t);
        selectAndShow(varDialog);
    }
    
    /**
     * Send a string to KASH
     * @param cmd <CODE>String</CODE> to send to KASH
     * @see KASHTerm
     */
    protected void tellKASH(String cmd){
        kash.tell(cmd);
    }
    
    //add window to the desktop
    //TO DO rename, fix this function
    /**
     * Add a window to the desktop
     * @param ins the <CODE>JInternalFrame</CODE> to add
     */
    protected void addFrame(JInternalFrame ins){
        java.awt.Dimension dim = ins.getSize();
        //int space = CPanel.getHeight();
        final int BASE = 25;
        int play = (int)(50 * java.lang.Math.random());
        //to do, make this pretty
        ins.setBounds(BASE + play, BASE + play, dim.width, dim.height);
        gui.desktop.add(ins, javax.swing.JLayeredPane.PALETTE_LAYER);
        //setSelectedAndShown(ins,true);
    }
    
    /**
     * Place a new nubmer field on the desktop
     * @param n number field
     * @see #city
     * @see City
     */
    protected void addField(NumberField n){
        city.addField(n);
        
    }
    
    /**
     * Give/Remove focus to/from desktop
     * @param flag desktop requests focus iff <CODE>flag == true</CODE>
     */
    protected void requestDesktopFocus(boolean flag){
        //desktop.requestFocus(flag);
        gui.requestFocus(flag);
    }
    
    /**
     * Select a window and display it
     * @param f the window to show
     */
    protected void selectAndShow(JInternalFrame f){
        try {
            f.setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            System.err.println("Problem with setSelected(true):  "+ e1);
            e1.printStackTrace();
        }
        if(f.isIcon())
			try{
				f.setIcon(false);
			}catch(java.beans.PropertyVetoException v){
				System.err.println("Unable to de-iconify frame=" + f + "\n" + v);
			}
        desktop.setSelectedFrame(f);
        f.show();
        f.toFront();
    }
    
    /**
     * Show the progress bar
     * @param flag show the bar iff <CODE>flag == true</CODE>
     * @see #progressBar
     */
    protected void showProgressBar(boolean flag){
        final CardLayout c = (CardLayout) progressBarPanel.getLayout();
        if(flag){
            c.show(progressBarPanel, "progressBar");//c.last(progressBarPanel);
        }else{
            c.show(progressBarPanel, "cover");//c.first(progressBarPanel);//
        }
        //this call is necessary on 1.42 for 0S X. why? no idea
        consolePanel.paintAll(consolePanel.getGraphics());
    }
    
    /**
     * Get maximum possible value for the progress bar
     * @return maximum possible value for the progress bar
     */
    public int getProgressMax(){
        return progressBar.getMaximum();
    }
            
    /**
     * Get minimum possible value for the progress bar
     * @return minimum possible value for the progress bar
     */
    public int getProgressMin(){
        return progressBar.getMinimum();
    }
    
    /**
     * Set the progress bar to the given value
     * @param n value to set the progress bar to
     */
    public void setProgress(int n){
        if(n==0){
            progressBar.setIndeterminate(true);
        }
        else{
            progressBar.setIndeterminate(false);
            progressBar.setValue(n);
        }
        consolePanel.paintAll(consolePanel.getGraphics());
    }
    
    /**
     * Display information to the user in the main window
     * @param msg text to display
     * @param error is this an error message?
     * @see #consoleTextArea
     */
    protected void appendConsoleText(String msg, boolean error){
        if(error){
            laf.provideErrorFeedback(null);
            //System.out.print(BELL);
            consoleTextArea.setForeground(ERROR_TEXT);
            //System.out.println("DING");
        }else{
            consoleTextArea.setForeground(NORMAL_TEXT);
        }
        consoleTextArea.append(msg);//"\n" + 
        consoleTextArea.setCaretPosition(consoleTextArea.getDocument().getLength());
        consoleScrollPane.revalidate(); //not needed on os x?
        consoleScrollPane.paintAll(consoleScrollPane.getGraphics());
        //consoleScrollPane.update(consoleScrollPane.getGraphics());
        //consoleTextArea.update(consoleTextArea.getGraphics());
        /*doesn't help...can't get console to update during progress bar activity
        consoleScrollPane.revalidate();
        consoleTextArea.revalidate();
        consoleScrollPane.paintAll(consoleScrollPane.getGraphics());
        consoleScrollPane.paintImmediately(0, 0, 500, 200);
        consoleTextArea.paintImmediately(0, 0, 800, 200);
                consolePanel.paintImmediately(0, 0, 800, 200);
                        consolePanel.paintAll(consolePanel.getGraphics());
                        consoleScrollPane.revalidate();
        consoleTextArea.revalidate();
        */
    }
	/**
	 * Make sure the user gives GiANT the right number of command-line args at startup
	 * @param args command-line args from <CODE>main()</CODE>
	 */
	private void validateArgs(String[] args){
		if(args.length != 1){
			System.err.println("GiANT expects one command-line argument:  "+
				"the path to the local KASH directory (see 'Installing & Running GiANT'" +
				" at http://sourceforge.net/docman/?group_id=141452 for details).");
			exitApp();
		}
		
	}
    /**
     * Start KASH, do some GUI layout, etc. before we show the main window
     * @param args arguments given to <CODE>main()</CODE> at launch time
     */
    protected void prep(String[] args){
		validateArgs(args);
        mainPanel.setLocation(0,0);
        sizeMainPanel();

        setLocation(4, 0); // don't pin the window so tight to the upper left corner
        laf = UIManager.getLookAndFeel();
		
		kash = new KASHTerm(args);
        gui.addFrame(varDialog);
        gui.addFrame(newNumFieldDialog);
        gui.addFrame(kash);
		gui.addFrame(globalInspector);
		gui.addFrame(ABOUT);
		
        kash.setLocation(150,150);
        kash.setVisible(false);
		desktop.setBackground(new Color(65, 105, 170));
        city.setBackground(desktop.getBackground());
        desktop.revalidate();
        kash.listen();
        initialized = true;
    }
    
    /**
     * Turn user input on/off. I'm not sure how carefully this function obeys its contract.
     * TO DO:  make sure all input that needs to be turned off gets turned off. On the
     * other hand , I'm not sure this function is even necessary (at least not for the 
     * single-threaded 1:1 KASH-to-GiANT way we do things now)
     * The original purpose was to prevent crashes and deadlocks that might be caused by
     * issuing new commands to KASH while another command is still pending
     * @param flag turn user input (text fields, etc.) OFF iff <CODE>flag == false</CODE>;
     * <CODE>true</CODE> turns things back on
     */
    protected void setInputEnabled(boolean flag){
        kash.setInputEnabled(flag);
        newNumFieldDialog.setInputEnabled(flag);
        if(!flag)
            gui.setCursor(java.awt.Cursor.WAIT_CURSOR);
        else
            gui.setCursor(java.awt.Cursor.DEFAULT_CURSOR);
        //TO DO change the cursor
    }
    
    /**
     * Display the dialog foor a new number field
     * @see #newNumFieldDialog
     */
    protected void showNewNumberFieldDialog(){
        selectAndShow(newNumFieldDialog);
    }
    
    /**
     * Maximize the main window
     */
    public void maximize(){
        GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();
        gui.setMaximizedBounds(env.getMaximumWindowBounds());
        gui.setBounds(env.getMaximumWindowBounds());
    }
	
	/**
	 * Show the About window
	 */
	public void showAboutWindow(){
		selectAndShow(ABOUT);
		ABOUT.quickShow();
	}
	
    /**
     * You know, "main".
     * @param args command-line arguments from .jar launch
     */
    public static void main(String args[]) {
        if(metal){
            try{
                //TO DO, use same desktop color across all platforms
                UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());

            } catch (Exception e) {
                System.err.println("Trouble setting LookAndFeel to Metal:  " + e);
            }
		}
		gui = new GiANT();
		gui.prep(args);
		gui.maximize();
		gui.show();
		gui.mainPanel.revalidate();//necessary to somehow validate Q/C + prevent them "jumping" to the right
		gui.showAboutWindow();
	}	
	/** Variables for Swing GUI objects in the GiANT class
	 *  If you to need to know more about these variables, i suggest firing up NetBeans
	 * and looking at the Design view of GiANT.java; otherwise all names are meant
	 * to be self-explanatory. The "NVF" prefix denotes variables for the new variable dialog
	 * <CODE>varDialog</CODE>**/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    /**
     * 
     */
    private javax.swing.JPanel NVFButtonPanel;
    private javax.swing.JLabel NVFButtonSpacer;
    private javax.swing.JButton NVFCancelButton;
    private javax.swing.JButton NVFCreateButton;
    private javax.swing.JPanel NVFFieldsPanel;
    private javax.swing.JPanel NVFMainPanel;
    private javax.swing.JTextField NVFNameField;
    private javax.swing.JLabel NVFNameLabel;
    private javax.swing.JPanel NVFPanel;
    private javax.swing.JPanel NVFSideSpacerPanel;
    private javax.swing.JTextField NVFValueField;
    private javax.swing.JLabel NVFValueLabel;
    private javax.swing.JMenu aboutMenu;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JScrollPane cityScrollPane;
    private javax.swing.JMenuItem classGroupMenuItem;
    private javax.swing.JPanel consolePanel;
    private javax.swing.JScrollPane consoleScrollPane;
    private javax.swing.JTextArea consoleTextArea;
    private javax.swing.JPanel consoleTextAreaPanel;
    protected javax.swing.JDesktopPane desktop;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JPanel frameBasePanel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem newNumberFieldMenuItem;
    private javax.swing.JInternalFrame newVariableFrame;
    private javax.swing.JMenuItem newVariableMenuItem;
    private javax.swing.JSeparator numberFieldMenuSeparator;
    private javax.swing.JMenu numberFieldsMenu;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JPanel progressBarCoverPanel;
    private javax.swing.JPanel progressBarPanel;
    private javax.swing.JMenuItem quitMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem showGlobalInspectorMenuItem;
    private javax.swing.JMenuItem showKASHMenuItem;
    private javax.swing.JMenuItem unitGroupMenuItem;
    private javax.swing.JMenuItem viewElementsMenuItem;
    private javax.swing.JMenuItem viewIdealsMenuItem;
    private javax.swing.JMenu viewMenu;
    private javax.swing.JSeparator viewMenuSeparator;
    private javax.swing.JMenuItem viewPolynomialsMenuItem;
    // End of variables declaration//GEN-END:variables
    
}