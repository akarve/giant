/*
 *GiANT - Graphical Algebra System
 *
 *Copyright (C) 2005  Aneesh Karve, e33nflow@users.sourceforge.net
 *
 *This program is free software; you can redistribute it and/or
 *modify it under the terms of the GNU General Public License
 *as published by the Free Software Foundation; either version 2
 *of the License, or (at your option) any later version.
 *
 *This program is distributed in the hope that it will be useful,
 *but WITHOUT ANY WARRANTY; without even the implied warranty of
 *MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *GNU General Public License for more details.
 *
 *You should have received a copy of the GNU General Public License
 *along with this program; if not, write to the Free Software
 *Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.*/

/*
 * NewPolyInternalFrame.java
 *
 * Created on April 25, 2005, 2:48 PM
 */

package net.giantsystem.sf;

/**
 * Provide dialog for entering generating polynomials to define number fields
 * @author karve
 */
public class NewFieldDialog extends javax.swing.JInternalFrame {
    
    /** Creates new form NewPolyInternalFrame */
    public NewFieldDialog() {
        initComponents();
    }
	
	/**
	 * attempt to create number field based on user-supplied generating polynomial
	 */
	private void doPolynomial(){
		
        String cmd = textField.getText();
        textField.setText("");
        String name = NumberField.getCurrentName();
        KASHTerm.Response r = GiANT.gui.kash.newNumberField(name, cmd);        
       
        //GiANT.gui.repaint();
        if(r.error()){
            System.err.print("Error creating new numberfield:  " + r.getError());
            //do nothing
        }else{
            //DEBUG
            //System.err.println("***");
            //System.err.print(r.getOutput());
            NumberField n = new NumberField(r.getOutput());
            GiANT.gui.addField(n);
            setVisible(false);

        }
	}
    
    /**
     * turn user input on/off
     */
    protected void setInputEnabled(boolean flag){
        textField.setEnabled(flag);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        basePanel = new javax.swing.JPanel();
        definingPolyLabel = new javax.swing.JLabel();
        textField = new javax.swing.JTextField();
        exampleLabel = new javax.swing.JLabel();
        buttonPanel = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        newButton = new javax.swing.JButton();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setTitle("New Number Field");
        setFocusCycleRoot(false);
        setFocusable(false);
        setPreferredSize(new java.awt.Dimension(360, 131));
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                formComponentHidden(evt);
            }
        });

        basePanel.setLayout(new java.awt.GridBagLayout());

        basePanel.setFocusable(false);
        basePanel.setPreferredSize(new java.awt.Dimension(350, 100));
        definingPolyLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        definingPolyLabel.setText("Generating Polynomial:");
        definingPolyLabel.setFocusable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        basePanel.add(definingPolyLabel, gridBagConstraints);

        textField.setFocusCycleRoot(true);
        textField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldActionPerformed(evt);
            }
        });
        textField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textFieldKeyPressed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 8.0;
        basePanel.add(textField, gridBagConstraints);

        exampleLabel.setFont(new java.awt.Font("Lucida Grande", 0, 12));
        exampleLabel.setText("Example:  x^3 + 3*x^2 - 11");
        exampleLabel.setEnabled(false);
        exampleLabel.setFocusable(false);
        exampleLabel.setIconTextGap(0);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weighty = 1.0;
        basePanel.add(exampleLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(15, 15, 0, 10);
        getContentPane().add(basePanel, gridBagConstraints);

        buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 10, 0));

        buttonPanel.setFocusable(false);
        cancelButton.setFocusable(false);
        cancelButton.setLabel("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(cancelButton);

        newButton.setText("New");
        newButton.setFocusable(false);
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(newButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 15, 0);
        getContentPane().add(buttonPanel, gridBagConstraints);

        pack();
    }
    // </editor-fold>//GEN-END:initComponents

	/**
	 * called when the user hits New
	 */
	private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
// TODO add your handling code here:
		doPolynomial();
	}//GEN-LAST:event_newButtonActionPerformed

    /**
     * called whenever this window is hidden
     */
    private void formComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentHidden
        // TODO add your handling code here:
         GiANT.gui.requestDesktopFocus(true);
    }//GEN-LAST:event_formComponentHidden

    /**
     * called whenever this window is shown
     */
    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        textField.grabFocus();
    }//GEN-LAST:event_formComponentShown

    /**
     * listen for 'esc'; if found, hide
     * @param evt 
     */
    private void textFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFieldKeyPressed

        int code = evt.getKeyCode();

        if(code == java.awt.event.KeyEvent.VK_ESCAPE)
            setVisible(false);
    }//GEN-LAST:event_textFieldKeyPressed

    /**
     * called when the user hits Cancel
     */
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * called when the user hits Enter while in the text field
     */
    private void textFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldActionPerformed
        doPolynomial();
    }//GEN-LAST:event_textFieldActionPerformed
    
    //see NetBeans form for more info. on the following variables
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel basePanel;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel definingPolyLabel;
    private javax.swing.JLabel exampleLabel;
    private javax.swing.JButton newButton;
    private javax.swing.JTextField textField;
    // End of variables declaration//GEN-END:variables
    
}
